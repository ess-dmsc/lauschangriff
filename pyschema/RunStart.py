# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class RunStart(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRunStart(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RunStart()
        x.Init(buf, n + offset)
        return x

    # RunStart
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RunStart
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # RunStart
    def RunNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RunStart
    def InstrumentName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RunStart
    def NPeriods(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RunStartStart(builder): builder.StartObject(4)
def RunStartAddStartTime(builder, startTime): builder.PrependUint64Slot(0, startTime, 0)
def RunStartAddRunNumber(builder, runNumber): builder.PrependInt32Slot(1, runNumber, 0)
def RunStartAddInstrumentName(builder, instrumentName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(instrumentName), 0)
def RunStartAddNPeriods(builder, nPeriods): builder.PrependInt32Slot(3, nPeriods, 0)
def RunStartEnd(builder): return builder.EndObject()
