# automatically generated by the FlatBuffers compiler, do not modify

# namespace: f140_general

import flatbuffers

class PV(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPV(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PV()
        x.Init(buf, n + offset)
        return x

    # PV
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PV
    def N(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PV
    def VType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # PV
    def V(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # PV
    def Fwdinfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .fwdinfo_t import fwdinfo_t
            obj = fwdinfo_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PVStart(builder): builder.StartObject(4)
def PVAddN(builder, n): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(n), 0)
def PVAddVType(builder, vType): builder.PrependUint8Slot(1, vType, 0)
def PVAddV(builder, v): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(v), 0)
def PVAddFwdinfo(builder, fwdinfo): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fwdinfo), 0)
def PVEnd(builder): return builder.EndObject()
